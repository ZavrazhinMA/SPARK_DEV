object ConditionalProbability extends App{
  import scala.util.Random
  /*
  В урне 3 белых и 3 черных шара. Из урны дважды вынимают по одному шару, не возвращая их обратно.
  Найти вероятность появления белого шара при втором испытании (событие В),
  если при первом испытании был извлечен черный шар (событие А).
 создать класс с моделированием эксперимента, в нем должна быть коллекция (List) моделирующая урну с шариками (1 - белый шарик, 0 - черный шарик) и функция случайного выбора 2х шариков без возвращения (scala.util.Random), возвращать эта функция должна true (если был выбран белый шар) и false (в противном случае)
создать коллекцию обьектов этих классов, скажем 10000 элементов, и провести этот эксперимент (функция map)
посчитать количество элементов массива из пункта 2 где функция вернула true, это количество поделенное на общее количество элементов массива
PS: чем больше будет количество опытов в пункте 2, тем ближе будет результат моделирования к аналитическому решению

Критерии оценки:
Результат должен быть близок к ожидаемому
Использовать как можно меньше явных циклов, отдавая предпочтение высокоуровневым функциям, как то map, foreach, fold, filter
Используйте только стандартные библиотеки из базового набора
   */

  case class Experiment(box: List[Int]) {
    def experimentSample2(): Boolean = {
      val take2 = Random.shuffle(box.sorted(Ordering.Int.reverse).init).take(2)
//      вероятность что первым достанут черный а вторым белый
//      val result = if ((take2.head == 0) && (take2(1) == 1)) true else false
//      вероятность хотя бы один будет белым
//      val result = if ((take2.head == 1) | (take2(1) == 1)) true else false
//      вероятность получения белого
      val result = if (take2.head == 1) true else false
      result
    }
  }
  val expQuantity = 100000
  val box = List( 0, 1, 1, 0, 1, 0)
  val expTimesN = List.fill(expQuantity)(Experiment(box))
  val expResults = expTimesN
    .map(x => x.experimentSample2())
    .groupBy(x => x)
    .map(x => (x._1, x._2.length.toDouble))

  println(expResults)
  def probability(a:Double, b: Double): Double = if (a + b != 0) a / (b +a) else 0
  println(f"Экспериментальная вероятность: ${probability(expResults(true) ,expResults(false))}, аналитическая: 0.6")
  // Экспериментальная вероятность: 0.599, аналитическая: 0.6
  // **********************************************************************************************************

}

